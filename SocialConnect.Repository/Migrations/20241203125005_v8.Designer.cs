// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialConnect.Repository.Data;

#nullable disable

namespace SocialConnect.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241203125005_v8")]
    partial class v8
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "bb3bd686-34e0-4e28-ba5f-4b81e296d4e9",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "a072d57e-20a6-451f-87eb-67dc319e5964",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SocialConnect.Core.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fk_CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Fk_postId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModefiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("useId_fk")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_CommentId");

                    b.HasIndex("Fk_postId");

                    b.HasIndex("useId_fk");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.CommentReact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fk_ReactId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Fk_postId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModefiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("useId_fk")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_ReactId");

                    b.HasIndex("Fk_postId");

                    b.HasIndex("useId_fk");

                    b.ToTable("ComsmentReact");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.FollowingUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FollowinguseId_fk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModefiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_Id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FollowingUsers");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModefiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Massages");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModefiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("useId_fk")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("useId_fk");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.React", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("React");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.SavedPost", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fk_postId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModefiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("useId_fk")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_postId");

                    b.HasIndex("useId_fk");

                    b.ToTable("SavedPosts");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.massageReact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fk_ReactId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MassageId_fk")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ModefiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserIdID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_ReactId");

                    b.HasIndex("MassageId_fk");

                    b.HasIndex("UserIdID");

                    b.ToTable("massageReacts");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.postReacts", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fk_ReactId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Fk_postId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModefiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("useId_fk")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Fk_ReactId");

                    b.HasIndex("Fk_postId");

                    b.HasIndex("useId_fk");

                    b.ToTable("postReacts");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialConnect.Core.Models.Comment", b =>
                {
                    b.HasOne("SocialConnect.Core.Models.Comment", "comment")
                        .WithMany("comments")
                        .HasForeignKey("Fk_CommentId");

                    b.HasOne("SocialConnect.Core.Models.Post", "post")
                        .WithMany("comments")
                        .HasForeignKey("Fk_postId");

                    b.HasOne("SocialConnect.Core.Models.User", "user")
                        .WithMany("comments")
                        .HasForeignKey("useId_fk");

                    b.Navigation("comment");

                    b.Navigation("post");

                    b.Navigation("user");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.CommentReact", b =>
                {
                    b.HasOne("SocialConnect.Core.Models.React", "react")
                        .WithMany()
                        .HasForeignKey("Fk_ReactId");

                    b.HasOne("SocialConnect.Core.Models.Comment", "comment")
                        .WithMany()
                        .HasForeignKey("Fk_postId");

                    b.HasOne("SocialConnect.Core.Models.User", "user")
                        .WithMany("CommentReacts")
                        .HasForeignKey("useId_fk");

                    b.Navigation("comment");

                    b.Navigation("react");

                    b.Navigation("user");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.Message", b =>
                {
                    b.HasOne("SocialConnect.Core.Models.User", null)
                        .WithMany("Massages")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.Post", b =>
                {
                    b.HasOne("SocialConnect.Core.Models.User", "user")
                        .WithMany("posts")
                        .HasForeignKey("useId_fk");

                    b.Navigation("user");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.React", b =>
                {
                    b.HasOne("SocialConnect.Core.Models.Comment", null)
                        .WithMany("Reacts")
                        .HasForeignKey("CommentId");

                    b.HasOne("SocialConnect.Core.Models.Post", null)
                        .WithMany("Reacts")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.SavedPost", b =>
                {
                    b.HasOne("SocialConnect.Core.Models.Post", "post")
                        .WithMany()
                        .HasForeignKey("Fk_postId");

                    b.HasOne("SocialConnect.Core.Models.User", "user")
                        .WithMany("SavedPosts")
                        .HasForeignKey("useId_fk");

                    b.Navigation("post");

                    b.Navigation("user");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.massageReact", b =>
                {
                    b.HasOne("SocialConnect.Core.Models.React", "react")
                        .WithMany()
                        .HasForeignKey("Fk_ReactId");

                    b.HasOne("SocialConnect.Core.Models.Message", "massage")
                        .WithMany()
                        .HasForeignKey("MassageId_fk");

                    b.HasOne("SocialConnect.Core.Models.User", "user")
                        .WithMany("massageReact")
                        .HasForeignKey("UserIdID");

                    b.Navigation("massage");

                    b.Navigation("react");

                    b.Navigation("user");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.postReacts", b =>
                {
                    b.HasOne("SocialConnect.Core.Models.React", "react")
                        .WithMany()
                        .HasForeignKey("Fk_ReactId");

                    b.HasOne("SocialConnect.Core.Models.Post", "post")
                        .WithMany()
                        .HasForeignKey("Fk_postId");

                    b.HasOne("SocialConnect.Core.Models.User", "user")
                        .WithMany("PostReacts")
                        .HasForeignKey("useId_fk");

                    b.Navigation("post");

                    b.Navigation("react");

                    b.Navigation("user");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.Comment", b =>
                {
                    b.Navigation("Reacts");

                    b.Navigation("comments");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.Post", b =>
                {
                    b.Navigation("Reacts");

                    b.Navigation("comments");
                });

            modelBuilder.Entity("SocialConnect.Core.Models.User", b =>
                {
                    b.Navigation("CommentReacts");

                    b.Navigation("Massages");

                    b.Navigation("PostReacts");

                    b.Navigation("SavedPosts");

                    b.Navigation("comments");

                    b.Navigation("massageReact");

                    b.Navigation("posts");
                });
#pragma warning restore 612, 618
        }
    }
}
